on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

      - name: Test
        run: |
          ls
          pwd

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application.yml
          spring:
            datasource:
              driver-class-name: com.mysql.cj.jdbc.Driver
              url: ${DATABASE_URL}
              username: ${DATABASE_USERNAME}
              password: ${DATABASE_PASSWORD}
              hikari:
                minimum-idle: 5                                     # 최소 유휴 커넥션 수
                maximum-pool-size: 10                               # 최대 커넥션 풀 크기 (RDS 설정에 따라 조정)
                idle-timeout: 600000                                # 유휴 연결 타임아웃 (밀리초)
                connection-timeout: 30000                           # 연결 타임아웃 (밀리초)
                max-lifetime: 1800000                               # 연결 최대 생명 주기 (밀리초)
                auto-commit: true                                   # Auto-commit 설정
                validation-timeout: 5000                            # 검증 타임아웃 (밀리초)
                connection-test-query: SELECT 1

            jpa:
              hibernate:
                ddl-auto: update
              properties:
                hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
              show-sql: true

            servlet:
              multipart:
                max-file-size: 50MB
                max-request-size: 50MB
            thymeleaf:
              prefix: classpath:/templates/
              suffix: .html
              check-template-location: true

            jwt:
              secret: ${JWT_SECRET}
              access-expired-in: 86400000   # AccessToken 유효 기간: 24시간 (밀리초)
              refresh-expired-in: 604800000  # RefreshToken 유효 기간: 7일 (밀리초)

            security:
              oauth2:
                client:
                  provider:
                    kakao:
                      authorization-uri: https://kauth.kakao.com/oauth/authorize
                      token-uri: https://kauth.kakao.com/oauth/token
                      user-info-uri: https://kapi.kakao.com/v2/user/me
                      user-name-attribute: id
                  registration:
                    kakao:
                      client-name: kakao
                      client-id: ${KAKAO_CLIENT_ID}
                      client-secret: ${KAKAO_CLIENT_SECRET}
                      redirect-uri: http://localhost:8080/login/oauth2/code/kakao
                      client-authentication-method: client_secret_post
                      authorization-grant-type: authorization_code
                      scope: account_email,profile_nickname,profile_image

          s3:
            credentials:
              access-key: ${S3_ACCESS_KEY}
              secret-key: ${S3_SECRET_KEY}
              region: ${S3_REGION}
            bucket: ${S3_BUCKET}

          kakaopay:
            admin-key: ${KAKAO_PAY_ADMIN_KEY}
          EOF
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          KAKAO_PAY_ADMIN_KEY: ${{ secrets.KAKAO_PAY_ADMIN_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

      - name: 권한 부여
        run: chmod +x ./gradlew  # 실행 권한 부여

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build -x test

      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar
          target: /home/ubuntu/BE/tobe

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/BE/current
            mkdir /home/ubuntu/BE/current
            mv /home/ubuntu/BE/tobe/project.jar /home/ubuntu/BE/current/project.jar
            cd /home/ubuntu/BE/current
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar project.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/BE/tobe

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.autoever'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	testImplementation 'org.springframework.security:spring-security-test'

	runtimeOnly 'com.mysql:mysql-connector-j:8.0.32'

	implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.780'

//	// AWS SDK (v2 사용)
//	implementation platform('software.amazon.awssdk:bom:2.17.89')
//	implementation 'software.amazon.awssdk:s3'

	// Database
	runtimeOnly 'com.mysql:mysql-connector-j'

	// JSON Processing
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'

	// Development Tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
	testImplementation 'org.mockito:mockito-core'
	testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

	implementation 'org.hibernate.orm:hibernate-core:6.5.2.Final'
	//kakao pay
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
}

tasks.named('test') {
	useJUnitPlatform()
	jvmArgs '-Xshare:off'
}

test {
	// finalizedBy : 이(test) 작업에 대해 주어진 종료자 작업을 추가
	finalizedBy jacocoTestReport // test 작업이 끝나고 jacocoTestReport를 실행
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = false
	}

	// 결과 리포트에서 제외할 클래스들
	def Qdomains = ['**/QA*', '**/QZ*'] // Qdomains 범위 수정
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"**/*Application*",
							"**/*Mapper*",
							"**/*Provider*",
							"**/*Config*",
							"**/*Util*",
							"**/*Request*",
							"**/*Response*",
							"**/*Entity*",
							"**/common",
					] + Qdomains)
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = ['**/*QA*', '**/*QZ*'] // Qdomains 범위 수정

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = []

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
			excludes = [
					"**.*Application*",
					"**.*Mapper*",
					"**.*Provider*",
					"**.*Config*",
					"**.*Request*",
					"**.*Response*",
					"**.*Entity*",
			] + Qdomains
		}
	}
}
